FROM ubuntu:14.04

RUN groupadd -r someusers --gid=1000 
RUN useradd -r -p "$(openssl passwd -1 sk)" -g someusers -G sudo --uid=1000 --create-home --shell /bin/bash sk 

# Update and allow for apt over HTTPS
RUN apt-get update && apt-get install -y apt-utils
RUN apt-get install software-properties-common build-essential -y
RUN add-apt-repository ppa:ubuntu-toolchain-r/test -y 
RUN add-apt-repository ppa:george-edison55/cmake-3.x
RUN apt-get update
RUN apt-get install gcc g++ cmake -y
#RUN apt-get install gcc-9 g++-9 cmake -y
#RUN sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9
#RUN update-alternatives --set gcc "/usr/bin/gcc-9"

# install atsdb deps
RUN apt-get install libboost-all-dev liblog4cpp5-dev libssl-dev libarchive-dev libmysql++-dev libeigen3-dev libmysqlclient-dev libsqlite3-dev libgdal-dev  -y
# tools
RUN apt-get install locate zip unzip qtchooser chrpath -y

RUN apt-get install libtbb-dev -y
RUN apt-get install wget -y
#RUN wget https://launchpad.net/ubuntu/+archive/primary/+files/libtbb2_2017~U7-8_amd64.deb
#RUN dpkg -i libtbb2_2017~U7-8_amd64.deb
#RUN wget https://launchpad.net/ubuntu/+archive/primary/+files/libtbb-dev_2017~U7-8_amd64.deb
#RUN dpkg -i libtbb-dev_2017~U7-8_amd64.deb

RUN cp /etc/apt/sources.list /etc/apt/sources.list~
RUN sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
RUN apt-get update

RUN apt-get build-dep libopenscenegraph-dev -y
RUN apt-get build-dep libosgearth-dev -y
RUN apt-get install libgeos-dev -y

# remove libs since manually installed
RUN apt-get remove qt4-qmake libqt4* qt4-dev-tools libopenscenegraph-dev libopenscenegraph99 openscenegraph openscenegraph-plugin-osgearth osgearth -y 
#libopenthreads-dev libopenthreads14 

# gui/x11 
RUN apt-get install gedit libgl1-mesa-dev libegl1-mesa-drivers libxkbcommon-x11-dev -y

# qt
#ENV QT_VERSION_A=5.6
#ENV QT_VERSION_B=5.6.2
#ENV QT_VERSION_SCRIPT=562
ENV QT_VERSION_A=5.9
ENV QT_VERSION_B=5.9.0
ENV QT_VERSION_SCRIPT=590

RUN wget https://download.qt.io/archive/qt/${QT_VERSION_A}/${QT_VERSION_B}/qt-opensource-linux-x64-${QT_VERSION_B}.run
RUN chmod +x qt-opensource-linux-x64-${QT_VERSION_B}.run 
COPY qt-noninteractive.qs /qt-noninteractive.qs
RUN ./qt-opensource-linux-x64-${QT_VERSION_B}.run --script qt-noninteractive.qs  -platform minimal

ENV QT_SELECT=5
ENV QT_QPA_PLATFORMTHEME=gtk3
ENV UBUNTU_MENUPROXY=
#ENV QT_STYLE_OVERRIDE=adwaita
ENV QTDIR=/qt/${QT_VERSION_A}
ENV PATH="${QTDIR}/gcc_64/bin:${PATH}"
ENV QTTOOLDIR="${QTDIR}/gcc_64/bin"
ENV QTLIBDIR="${QTDIR}/gcc_64/"

#osg
#RUN wget https://github.com/openscenegraph/OpenSceneGraph/archive/OpenSceneGraph-3.4.1.zip
#RUN unzip OpenSceneGraph-3.4.1.zip
#RUN mkdir OpenSceneGraph-OpenSceneGraph-3.4.1/build
#RUN cd OpenSceneGraph-OpenSceneGraph-3.4.1/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
#RUN cd OpenSceneGraph-OpenSceneGraph-3.4.1/build && make -j 16
#RUN cd OpenSceneGraph-OpenSceneGraph-3.4.1/build && make install

RUN add-apt-repository ppa:ubuntugis/ppa
RUN apt-get update && apt-get --only-upgrade install libgdal-dev  -y

RUN wget https://github.com/openscenegraph/OpenSceneGraph/archive/OpenSceneGraph-3.6.5.zip
RUN unzip OpenSceneGraph-3.6.5.zip
RUN mkdir OpenSceneGraph-OpenSceneGraph-3.6.5/build
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && cmake -DCMAKE_INSTALL_PREFIX=/usr --config Release ..
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && make -j 16
RUN cd OpenSceneGraph-OpenSceneGraph-3.6.5/build && make install

RUN wget https://github.com/openscenegraph/osgQt/archive/Qt4.zip
RUN unzip Qt4.zip
RUN mkdir osgQt-Qt4/build
RUN cd osgQt-Qt4/build && cmake -DCMAKE_INSTALL_PREFIX=/usr --config Release ..
RUN cd osgQt-Qt4/build && make -j 16
RUN cd osgQt-Qt4/build && make install

# osgEarth
#RUN wget https://github.com/gwaldron/osgearth/archive/osgearth-2.9.zip
#RUN unzip osgearth-2.9.zip
#RUN mkdir osgearth-osgearth-2.9/build
#RUN cd osgearth-osgearth-2.9/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DOSGEARTH_USE_QT=TRUE -DDESIRED_QT_VERSION=5 -DCMAKE_BUILD_TYPE=Release ..
#RUN cd osgearth-osgearth-2.9/build && make -j 16
#RUN cd osgearth-osgearth-2.9/build && make install

RUN apt-get install libgeos++-dev -y

RUN wget https://github.com/gwaldron/osgearth/archive/osgearth-2.10.2.zip
RUN unzip osgearth-2.10.2.zip
RUN mkdir osgearth-osgearth-2.10.2/build
RUN cd osgearth-osgearth-2.10.2/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DOSGEARTH_USE_QT=TRUE -DDESIRED_QT_VERSION=5 -DCMAKE_BUILD_TYPE=Release ..
RUN cd osgearth-osgearth-2.10.2/build && make -j 16
RUN cd osgearth-osgearth-2.10.2/build && make install

#RUN wget https://github.com/gwaldron/osgearth/archive/osgearth-2.10.2.zip
#RUN unzip osgearth-2.10.2.zip
#RUN mkdir osgearth-osgearth-2.10.2/build
#RUN cd osgearth-osgearth-2.10.2/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DOSGEARTH_USE_QT=TRUE -DDESIRED_QT_VERSION=5 --config Release ..
#RUN cd osgearth-osgearth-2.10.2/build && make -j 16
#RUN cd osgearth-osgearth-2.10.2/build && make install

RUN wget https://github.com/ckgt/NemaTode/archive/master.zip
RUN unzip master.zip
RUN mkdir NemaTode-master/build
RUN cd NemaTode-master/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
RUN cd NemaTode-master/build && make -j 16
RUN cd NemaTode-master/build && make install

#RUN apt-get install gdb -y

RUN ldconfig -v /usr/lib64/ 
RUN updatedb

USER sk
WORKDIR /app/workspace/compass/docker
